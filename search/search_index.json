{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Pytest%20Setup/","title":"Testing Infrastructure and Setup","text":"<p>This document outlines the process and milestones completed to set up a robust testing environment for the Keyhole Automation Platform backend using <code>pytest</code> and related tools.</p>"},{"location":"Pytest%20Setup/#goals","title":"\u2705 Goals","text":"<ul> <li>Ensure all backend test files are discoverable and executable via <code>pytest</code></li> <li>Align test file structure to mirror the source code structure</li> <li>Validate that core systems such as the Qdrant vector DB and FastAPI backend are functional</li> </ul>"},{"location":"Pytest%20Setup/#project-structure","title":"\ud83e\udde9 Project Structure","text":"<pre><code>Keyhole_Automation_Platform/\n\u2502\n\u251c\u2500\u2500 backend/\n\u2502   \u2514\u2500\u2500 mcp/\n\u2502       \u2514\u2500\u2500 src/\n\u2502           \u251c\u2500\u2500 server.py\n\u2502           \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 backend/\n\u2502       \u2514\u2500\u2500 mcp/\n\u2502           \u2514\u2500\u2500 test_server.py\n\u2502\n\u251c\u2500\u2500 init_project.py\n\u251c\u2500\u2500 pytest.ini\n\u2514\u2500\u2500 .venv/\n</code></pre>"},{"location":"Pytest%20Setup/#test-configuration","title":"\ud83e\uddea Test Configuration","text":""},{"location":"Pytest%20Setup/#pytestini","title":"<code>pytest.ini</code>","text":"<pre><code># Keyhole_Automation_Platform/pytest.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths = \n    tests\npythonpath = \n    backend/mcp/src\n    backend\n</code></pre>"},{"location":"Pytest%20Setup/#init_projectpy","title":"<code>init_project.py</code>","text":"<p>Ensures that the memory system and Qdrant integration initialize before any code is executed.</p> <pre><code># Keyhole_Automation_Platform/init_project.py\nimport os\nimport sys\n\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nBACKEND_PATH = os.path.join(PROJECT_ROOT, \"backend\")\n\nif BACKEND_PATH not in sys.path:\n    sys.path.insert(0, BACKEND_PATH)\n\nfrom memory_manager import init_memory_collection\ninit_memory_collection()\n\nprint(\"\u2705 Project initialized. All modules are now importable.\")\n</code></pre>"},{"location":"Pytest%20Setup/#test-results","title":"\u2705 Test Results","text":"<p>Tests are now executable using the standard command:</p> <pre><code>pytest\n</code></pre> <p>All 7 backend tests passed successfully:</p> <pre><code>7 passed, 1 warning in 1.23s\n</code></pre> <p>\u26a0\ufe0f Warning noted from Pydantic v2 migration guide \u2014 safe to ignore for now.</p>"},{"location":"Pytest%20Setup/#current-best-practices","title":"\ud83d\udd04 Current Best Practices","text":"<ul> <li>All test files reside in the <code>tests/</code> directory</li> <li>Test structure mirrors source code layout</li> <li>All testable modules import cleanly using <code>pytest.ini</code>-defined <code>pythonpath</code></li> <li>Qdrant container must be running for memory-based tests to pass</li> </ul>"},{"location":"Pytest%20Setup/#coming-up-next","title":"\ud83d\udce6 Coming Up Next","text":"<ul> <li>Frontend test integration with React Native / Jest</li> <li>GitHub CI/CD test runs</li> <li>Test coverage reports via <code>pytest-cov</code></li> <li>Mocking external APIs (Vonage, Gmail, WhatsApp, etc.) for unit tests</li> </ul> <p>\ud83e\udde0 We now have a stable and clean test framework that validates all backend functionality including memory, routing, and system health. Time to build on this.</p>"},{"location":"React%20Native%20Settup/","title":"React Native Settup","text":"<p>\u2705 Setting up the React App (Vite + Tailwind)</p> <p>\u2705 Frontend Testing (Jest-based)</p> <p>\u2705 Matches your project's structure (Keyhole-Solution-App for frontend)</p> <p>\ud83d\udcd8 React App Setup &amp; Testing Guide \u2699\ufe0f Setting Up the React Frontend Our frontend is built using Vite with React and Tailwind CSS. The project resides in:</p> <p>bash Copy Edit /Keyhole_Automation_Platform/frontend \u2705 Installation Steps Navigate to the frontend directory:</p> <p>bash Copy Edit cd frontend Install dependencies:</p> <p>bash Copy Edit npm install Run the development server:</p> <p>bash Copy Edit npm run dev Build for production:</p> <p>bash Copy Edit npm run build Preview production build:</p> <p>bash Copy Edit npm run preview \ud83e\uddea Frontend Testing Strategy We use Jest with React Testing Library for unit testing the React components.</p> <p>\ud83d\uddc2 Test File Structure All tests for the React app live under:</p> <p>bash Copy Edit /Keyhole_Automation_Platform/Keyhole-Solution-App/tests Tests mirror the source structure from frontend/src. For example:</p> <p>Component Source    Test Location frontend/src/components/Chatbot.jsx Keyhole-Solution-App/tests/components/Chatbot.test.jsx frontend/src/utils/helpers.ts   Keyhole-Solution-App/tests/utils/helpers.test.ts \u2705 Running Tests From the frontend directory:</p> <p>bash Copy Edit npm test Or to run with watch mode:</p> <p>bash Copy Edit npm run test:watch If test:watch is not set, add it in package.json:</p> <p>json Copy Edit \"scripts\": {   \"test\": \"jest\",   \"test:watch\": \"jest --watch\" } \ud83e\uddea Jest Configuration Jest config is located in:</p> <p>arduino Copy Edit /frontend/jest.config.js We use:</p> <p>jsdom as test environment</p> <p>@testing-library/react for component testing</p> <p>Support for .jsx, .tsx, .ts, .js</p> <p>\ud83e\uddfc Best Practices Tests live outside the source code, grouped in Keyhole-Solution-App/tests.</p> <p>Every component should have at least one unit test.</p> <p>Use mocking for API calls or global stores.</p> <p>Let me know if you want me to generate a starter jest.config.js or create an example test case in your structure.</p> <p>You said: excuse me.  I need this written in markdown for our mkdocs ChatGPT said: Absolutely! Here's the full Markdown version you can drop directly into your MkDocs documentation (e.g., as frontend.md under your docs/ folder):</p> <p>markdown Copy Edit</p>"},{"location":"React%20Native%20Settup/#frontend-react-app-setup-testing","title":"\ud83d\udda5\ufe0f Frontend: React App Setup &amp; Testing","text":""},{"location":"React%20Native%20Settup/#react-frontend-setup","title":"\u2699\ufe0f React Frontend Setup","text":"<p>The Keyhole Automation Platform uses a modern React frontend built with Vite and styled using Tailwind CSS.</p> <p>\ud83d\udcc1 Project location: /Keyhole_Automation_Platform/frontend</p> <p>markdown Copy Edit</p>"},{"location":"React%20Native%20Settup/#installation","title":"\u2705 Installation","text":"<ol> <li> <p>Navigate to the frontend directory:     <code>bash     cd frontend</code></p> </li> <li> <p>Install dependencies:     <code>bash     npm install</code></p> </li> <li> <p>Run the development server:     <code>bash     npm run dev</code></p> </li> <li> <p>Build for production:     <code>bash     npm run build</code></p> </li> <li> <p>Preview the production build:     <code>bash     npm run preview</code></p> </li> </ol>"},{"location":"React%20Native%20Settup/#react-testing-setup","title":"\ud83e\uddea React Testing Setup","text":"<p>We use Jest along with React Testing Library for unit testing React components.</p> <p>\ud83e\uddea Test files live outside the source code under:</p> <p>/Keyhole_Automation_Platform/Keyhole-Solution-App/tests</p> <p>yaml Copy Edit</p> <p>This allows for centralized testing and easier batch testing across all frontend modules.</p>"},{"location":"React%20Native%20Settup/#test-folder-structure","title":"\ud83d\udcc1 Test Folder Structure","text":"<p>Test files mirror the structure of your <code>frontend/src</code> directory.</p> Component Source Test Location <code>frontend/src/components/Chatbot.jsx</code> <code>Keyhole-Solution-App/tests/components/Chatbot.test.jsx</code> <code>frontend/src/utils/helpers.ts</code> <code>Keyhole-Solution-App/tests/utils/helpers.test.ts</code>"},{"location":"React%20Native%20Settup/#running-tests","title":"\u2705 Running Tests","text":"<p>From inside the <code>frontend</code> directory:</p> <p>```bash npm test To run tests in watch mode:</p> <p>bash Copy Edit npm run test:watch If test:watch isn't already set up, add it in your package.json:</p> <p>json Copy Edit \"scripts\": {   \"test\": \"jest\",   \"test:watch\": \"jest --watch\" } \u2699\ufe0f Jest Configuration The Jest config file is located at:</p> <p>arduino Copy Edit /frontend/jest.config.js We use:</p> <p>jsdom as the test environment</p> <p>@testing-library/react for component-level testing</p> <p>TypeScript support for .ts / .tsx files</p> <p>Aliased imports and babel-jest for JSX handling (optional depending on your setup)</p> <p>\u2705 Best Practices \ud83e\uddea Keep test files outside the source tree in Keyhole-Solution-App/tests.</p> <p>\ud83e\uddea Every component or logic module should have a matching test file.</p> <p>\ud83d\udce6 Use mocking for API services, global stores, or environment dependencies.</p> <p>\ud83c\udfaf Aim for unit and integration coverage, especially for form logic, API calls, and rendering.</p> <p>\ud83d\udd27 Need help scaffolding tests or generating the Jest config? Just ask.</p> <p>vbnet Copy Edit</p> <p>Let me know if you'd like this broken into two separate docs (<code>frontend-setup.md</code> and <code>frontend-testing.md</code>), or want it auto-added to <code>mkdocs.yml</code>.</p>"},{"location":"security/","title":"\ud83d\udd10 Security Overview","text":"<p>This document outlines the key security practices and recommendations for the Keyhole Automation Platform.</p>"},{"location":"security/#authentication-authorization","title":"\ud83d\udd11 Authentication &amp; Authorization","text":""},{"location":"security/#high-priority","title":"\u2705 High Priority","text":"Feature Description JWT or OAuth2 Login Secure login system using access tokens. User Roles Define roles such as <code>guest</code>, <code>user</code>, and <code>admin</code> for access control. Rate Limiting for Guests Prevent abuse by limiting unauthenticated requests."},{"location":"security/#api-security","title":"\ud83e\uddca API Security","text":"Feature Description HTTPS Only All traffic must be encrypted with SSL. Input Validation Sanitize and validate user inputs via Pydantic. CORS Restriction Limit frontend access to approved domains. Secrets Management Never hardcode API keys. Use <code>.env</code> or secret managers."},{"location":"security/#data-privacy-protection","title":"\ud83e\udde0 Data Privacy &amp; Protection","text":"Feature Description Encrypt Sensitive Fields Protect personal data like names, emails, or passwords. Hash IP Addresses (optional) Comply with GDPR by anonymizing guests. Purge Guest Data on Timeout Avoid retaining inactive or orphaned guest memory. User-Controlled Memory Deletion Let users erase their stored facts and chat logs."},{"location":"security/#docker-deployment-hardening","title":"\ud83d\udc33 Docker &amp; Deployment Hardening","text":"Feature Description Private Qdrant Port Do not expose Qdrant to the internet. Use internal networking. Docker Secrets Store sensitive data securely using Docker secrets. Minimal Port Exposure Disable ports like <code>6334</code> if unused. Auto-Restart Policies Containers auto-recover after crashes."},{"location":"security/#logging-monitoring","title":"\ud83d\udd2d Logging &amp; Monitoring","text":"Feature Description Structured Logs Replace <code>print()</code> with Python logging system. Failed Login Tracking Alert on suspicious behavior or brute-force attempts. Monitoring Tools Integrate with Grafana + Loki, Papertrail, or Datadog. Qdrant Health Monitoring Watch for memory usage, latency, and anomalies."},{"location":"security/#optional-ai-specific-safety","title":"\ud83d\udee1\ufe0f Optional: AI-Specific Safety","text":"Feature Description Prompt Moderation Use OpenAI/Gemini content filters. Response Length Controls Limit token count to avoid excessive memory consumption."},{"location":"security/#summary","title":"\ud83d\udccc Summary","text":"<p>Security is critical to ensure the trust, reliability, and integrity of your automation system. Implement these recommendations in your production environment to protect user data and maintain compliance.</p>"},{"location":"dev/archiving/","title":"\ud83d\udd12 Archiving Code and Tests","text":"<p>In the Keyhole Automation Platform, deprecated code and tests are moved to the <code>archive/</code> directory to preserve past work while keeping the active codebase clean and efficient.</p>"},{"location":"dev/archiving/#archive-folder-structure","title":"\ud83d\udcc1 Archive Folder Structure","text":"<p>Archived files mirror their original directory structure, like so:</p> <p>Original location: C:. +---backend | qdrant.py | ---tests ---backend test_qdrant.py</p> <p>Archived version: C:. ---archive +---backend | qdrant.py \u279c renamed to qdrant_raw.py | ---tests ---backend test_qdrant.py</p>"},{"location":"dev/archiving/#file-annotations","title":"\ud83c\udff7\ufe0f File Annotations","text":"<p>Archived files include clear headers to indicate their status and usage:</p>"},{"location":"dev/archiving/#archived-module-example","title":"\ud83d\udd39 Archived Module Example","text":"<p>```python</p>"},{"location":"dev/archiving/#keyhole_automation_platformarchivebackendqdrant_rawpy","title":"Keyhole_Automation_Platform\\archive\\backend\\qdrant_raw.py","text":""},{"location":"dev/archiving/#archived-module-not-run-in-production","title":"\ud83d\udd12 ARCHIVED MODULE - NOT RUN IN PRODUCTION","text":""},{"location":"dev/archiving/#this-file-was-deprecated-and-moved-from-backendqdrantpy","title":"This file was deprecated and moved from backend/qdrant.py.","text":""},{"location":"dev/archiving/#retained-for-reference-or-future-reuse","title":"Retained for reference or future reuse.","text":""},{"location":"internal/system_context/","title":"System context","text":"<pre><code>C:/Users/natha/Py_Coding_Projects/Keyhole_Automation_Platform/docs/internal/system_context.md\n</code></pre>"},{"location":"internal/system_context/#system-context-keyhole-automation-platform","title":"\ud83e\udde0 System Context: Keyhole Automation Platform","text":""},{"location":"internal/system_context/#project-structure-overview","title":"\ud83d\udd27 Project Structure Overview","text":"<pre><code>Keyhole_Automation_Platform/\n\u2502\n\u251c\u2500\u2500 backend/\n\u2502   \u2514\u2500\u2500 mcp/\n\u2502       \u251c\u2500\u2500 routes/            # FastAPI route files (auth, agent, dashboard)\n\u2502       \u251c\u2500\u2500 dependencies/      # JWT/role validation, auth dependencies\n\u2502       \u251c\u2500\u2500 memory/            # MemoryManager + Qdrant integration\n\u2502       \u251c\u2500\u2500 utils/             # email_utils, auth_utils, jwt_utils\n\u2502       \u251c\u2500\u2500 server.py          # Main FastAPI app entrypoint\n\u2502\n\u251c\u2500\u2500 frontend/\n\u2502   \u2514\u2500\u2500 Keyhole-Solution-App/\n\u2502       \u2514\u2500\u2500 app/\n\u2502           \u251c\u2500\u2500 screens/       # React Native screens\n\u2502           \u2502   \u2514\u2500\u2500 LoginScreen.tsx\n\u2502           \u2514\u2500\u2500 utils/         # Shared frontend utility functions\n\u2502\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 backend/\n\u2502       \u2514\u2500\u2500 mcp/\n\u2502           \u2514\u2500\u2500 routes/        # Route-specific unit tests\n\u2502           \u2514\u2500\u2500 utils/         # Email mocking tests\n\u2502\n\u251c\u2500\u2500 .env                      # Shared backend config (e.g. SMTP, TESTING)\n\u251c\u2500\u2500 requirements.txt          # Python dependencies\n\u251c\u2500\u2500 setup.bat                 # Unified local dev launcher\n</code></pre>"},{"location":"internal/system_context/#authentication-email-flow","title":"\ud83d\udd10 Authentication &amp; Email Flow","text":""},{"location":"internal/system_context/#backend-flow-fastapi","title":"\ud83d\udd01 Backend Flow (FastAPI)","text":"<ol> <li><code>/auth/register</code></li> <li>Hashes and stores password</li> <li>Stores default role <code>user</code></li> <li>Sends verification email using <code>send_email(...)</code></li> <li> <p>Memory is stored in Qdrant under user-specific collection</p> </li> <li> <p><code>/auth/verify-email</code></p> </li> <li>Parses the JWT token</li> <li> <p>Sets <code>email_verified = true</code> in memory</p> </li> <li> <p><code>/auth/login</code></p> </li> <li>Validates email + password</li> <li>Confirms <code>email_verified</code> is true</li> <li> <p>Issues new JWT if successful</p> </li> <li> <p><code>/auth/logout</code></p> </li> <li>Stateless endpoint</li> <li> <p>Handled entirely via frontend</p> </li> <li> <p>MemoryManager (Qdrant)</p> </li> <li>One Qdrant collection per user (<code>facts_&lt;email&gt;</code>)</li> <li>All facts (password_hash, email_verified, etc.) stored as key-value vector records</li> </ol>"},{"location":"internal/system_context/#frontend-integration-react-native","title":"\ud83d\udcbb Frontend Integration (React Native)","text":""},{"location":"internal/system_context/#loginscreentsx","title":"\ud83d\udcf1 LoginScreen.tsx","text":"<ul> <li>Collects email + password</li> <li>Sends to <code>/auth/login</code></li> <li>Saves access token in async storage</li> <li>Navigates to secure screen if successful</li> </ul>"},{"location":"internal/system_context/#auth-flow","title":"\ud83d\udd12 Auth Flow","text":"<ul> <li>Token stored in memory</li> <li>Sent on future requests via Authorization header</li> <li>Logged-out state clears token</li> </ul>"},{"location":"internal/system_context/#testing-strategy","title":"\u2705 Testing Strategy","text":""},{"location":"internal/system_context/#unit-tests","title":"\ud83e\uddea Unit Tests","text":"<ul> <li>All <code>auth_*</code> endpoints have dedicated test files</li> <li>Email is mocked using <code>IS_TESTING=true</code> flag</li> <li>Tests use Qdrant collections prefixed with <code>facts_test_*</code></li> <li><code>pytest -s tests/backend/mcp/routes/test_auth_*.py</code> for backend testing</li> <li>React Native frontend tests go in <code>__tests__</code> next to screens</li> </ul>"},{"location":"internal/system_context/#agent-memory-context","title":"\ud83e\udde0 Agent Memory &amp; Context","text":"<ul> <li>Agents retrieve memory from Qdrant using MemoryManager</li> <li>Login is required to isolate user context</li> <li>Guest sessions are temporary and IP-tracked</li> <li>All authenticated users have persistent memory</li> </ul>"},{"location":"internal/system_context/#security-features","title":"\ud83d\udee1\ufe0f Security Features","text":"<ul> <li>Role-based route protection (<code>user</code>, <code>guest</code>, <code>admin</code>)</li> <li>JWT validation via FastAPI Depends</li> <li>All emails sent through <code>security@keyholesolution.com</code></li> <li><code>passlib[bcrypt]</code> for password hashing</li> <li><code>.env</code> centralizes config/secrets</li> </ul>"}]}
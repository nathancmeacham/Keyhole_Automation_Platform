Contents of C:\Users\natha\Py_Coding_Projects\Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\+not-found.tsx:
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

----------------------------------------
Contents of C:\Users\natha\Py_Coding_Projects\Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\context:

----------------------------------------
Contents of C:\Users\natha\Py_Coding_Projects\Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\crawl.py:
import os
import sys

# Define folders to exclude from crawling
EXCLUDED_FOLDERS = ['agent']

def should_crawl_folder(folder_path):
    """Check if the folder should be crawled."""
    folder_name = os.path.basename(folder_path)
    return folder_name not in EXCLUDED_FOLDERS

def crawl_directory(directory):
    """Recursively crawl the directory and print file contents."""
    for root, dirs, files in os.walk(directory):
        # Remove excluded folders from the list of directories to crawl
        dirs[:] = [d for d in dirs if should_crawl_folder(os.path.join(root, d))]
        
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    print(f"Contents of {file_path}:")
                    print(f.read())
                    print("-" * 40)
            except (UnicodeDecodeError, PermissionError):
                # Skip files that cannot be read (e.g., binary files or permission issues)
                print(f"Skipping {file_path} (unreadable or binary file)")

# Set sys.stdout encoding to utf-8 to handle Unicode characters
sys.stdout.reconfigure(encoding='utf-8')

# Start crawling from the specified root directory
root_directory = r'C:\Users\natha\Py_Coding_Projects\Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app'
crawl_directory(root_directory)
----------------------------------------
Contents of C:\Users\natha\Py_Coding_Projects\Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\index.tsx:
// Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\index.tsx

import React, { useRef, useEffect, useState } from 'react';
import {
  Animated,
  Easing,
  Dimensions,
  View,
  StyleSheet,
  Text,
  TouchableOpacity,
  StatusBar,
  SafeAreaView,
  Alert,
} from 'react-native';
import { useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage'; // ðŸ‘ˆ Import AsyncStorage
import LogoIcon from '../components/LogoIcon';

export default function HomeScreen() {
  const pulseAnim = useRef(new Animated.Value(1)).current;
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const [logoSize, setLogoSize] = useState(Dimensions.get('window').width * 0.3);
  const router = useRouter();
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Track login state

  useEffect(() => {
    const updateLogoSize = () => {
      setLogoSize(Dimensions.get('window').width * 0.3);
    };

    const dimensionsListener = Dimensions.addEventListener('change', updateLogoSize);

    // Animations
    const pulseAnimation = Animated.loop(
      Animated.sequence([
        Animated.timing(pulseAnim, {
          toValue: 1.05,
          duration: 1250,
          easing: Easing.inOut(Easing.ease),
          useNativeDriver: true,
        }),
        Animated.timing(pulseAnim, {
          toValue: 1,
          duration: 1250,
          easing: Easing.inOut(Easing.ease),
          useNativeDriver: true,
        }),
      ])
    );

    const fadeAnimation = Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 2000,
      delay: 1000,
      useNativeDriver: true,
    });

    pulseAnimation.start();
    fadeAnimation.start();

    // Check for auth token on mount
    checkAuthToken();

    return () => {
      pulseAnimation.stop();
      fadeAnimation.stop();
      dimensionsListener.remove();
    };
  }, []);

  const checkAuthToken = async () => {
    try {
      const token = await AsyncStorage.getItem('authToken');
      setIsLoggedIn(!!token);
      if (!token) {
        router.replace('/screens/LoginScreen'); // Redirect to login if no token
      }
    } catch (error) {
      console.error('Error checking auth token:', error);
      Alert.alert('Error', 'Failed to check authentication status.');
      router.replace('/screens/LoginScreen');
    }
  };

  const handleGetStarted = () => {
    router.push('/agent');
  };

  if (!isLoggedIn) {
    return null; // or a loading indicator
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      <View style={styles.content}>
        <View style={styles.logoContainer}>
          <Animated.View style={{ transform: [{ scale: pulseAnim }] }}>
            <LogoIcon size={logoSize} />
          </Animated.View>
        </View>

        <Animated.View style={[styles.contentContainer, { opacity: fadeAnim }]}>
          <Text style={styles.subtitle}>
            Welcome to the Keyhole Automation Platform
          </Text>

          <TouchableOpacity onPress={handleGetStarted} style={styles.button}>
            <Text style={styles.buttonText}>Get Started</Text>
          </TouchableOpacity>
        </Animated.View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1F2D45',
  },
  content: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  logoContainer: {
    paddingVertical: 40,
  },
  contentContainer: {
    alignItems: 'center',
  },
  subtitle: {
    marginTop: 24,
    fontSize: 18,
    color: '#ffffffcc',
    textAlign: 'center',
    fontWeight: '500',
  },
  button: {
    marginTop: 32,
    paddingVertical: 14,
    paddingHorizontal: 32,
    backgroundColor: '#374b6e',
    borderRadius: 8,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
----------------------------------------
Contents of C:\Users\natha\Py_Coding_Projects\Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\_layout.tsx:
// Keyhole_Automation_Platform\frontend\Keyhole-Solution-App\app\_layout.tsx

import { Slot } from 'expo-router';
import { SafeAreaView, StyleSheet, StatusBar } from 'react-native';

export default function Layout() {
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#1F2D45" />
      <Slot />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1F2D45', // Matching background for LogoIcon screen
  },
});

----------------------------------------
